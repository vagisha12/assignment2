/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import model.Uber;
import model.UberCatalogue;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vagishadeo
 */
public class ManagePanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePanel
     */
    
    UberCatalogue ubercatalogue;
    
    public ManagePanel(UberCatalogue ubercatalogue) 
    {
        initComponents();
        this.ubercatalogue = ubercatalogue;
        
        populateTable(ubercatalogue.getUber_catalogue());
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelAdvancedSearch = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableUberView = new javax.swing.JTable();
        buttonAvailable = new javax.swing.JButton();
        buttonFirstAvailable = new javax.swing.JButton();
        buttonCarBrand = new javax.swing.JButton();
        buttonManufacturedYear = new javax.swing.JButton();
        buttonSeatNumber = new javax.swing.JButton();
        textCarBrand = new javax.swing.JTextField();
        txtManufactureYearSearch = new javax.swing.JTextField();
        textMinimum = new javax.swing.JTextField();
        textMaximum = new javax.swing.JTextField();
        buttonModelNumber = new javax.swing.JButton();
        buttonSerialNumber = new javax.swing.JButton();
        buttonListCarBrands = new javax.swing.JButton();
        buttonCityAvailable = new javax.swing.JButton();
        buttonLastTime = new javax.swing.JButton();
        textSerialNumber = new javax.swing.JTextField();
        textCityAvailability = new javax.swing.JTextField();
        buttonRefresh = new javax.swing.JButton();
        labelAvailableCars = new javax.swing.JLabel();
        labelNotAvailableUbers = new javax.swing.JLabel();
        labelLastTime = new javax.swing.JLabel();
        textModelNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCars = new javax.swing.JList<>();
        btnCarManufacturers = new javax.swing.JButton();

        labelAdvancedSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelAdvancedSearch.setText("Advanced Search");

        tableUberView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Make of Car", "Manufactured Year", "Number of Seats", "Serial Number", "Model Number", "City", "Maintenance Year", "Availability", "Availability date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUberView.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                tableUberViewAncestorMoved(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane2.setViewportView(tableUberView);

        buttonAvailable.setText("All Available Uber");
        buttonAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAvailableActionPerformed(evt);
            }
        });

        buttonFirstAvailable.setText("First Available Uber");
        buttonFirstAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFirstAvailableActionPerformed(evt);
            }
        });

        buttonCarBrand.setText("Uber Brand");
        buttonCarBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCarBrandActionPerformed(evt);
            }
        });

        buttonManufacturedYear.setText("Manufactured Year");
        buttonManufacturedYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonManufacturedYearActionPerformed(evt);
            }
        });

        buttonSeatNumber.setText("Seat Number");
        buttonSeatNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSeatNumberActionPerformed(evt);
            }
        });

        textCarBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textCarBrandActionPerformed(evt);
            }
        });

        txtManufactureYearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtManufactureYearSearchActionPerformed(evt);
            }
        });

        buttonModelNumber.setText("Model Number");
        buttonModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModelNumberActionPerformed(evt);
            }
        });

        buttonSerialNumber.setText("Serial Number");
        buttonSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSerialNumberActionPerformed(evt);
            }
        });

        buttonListCarBrands.setText("List Uber Brands");
        buttonListCarBrands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonListCarBrandsActionPerformed(evt);
            }
        });

        buttonCityAvailable.setText("Ubers in City");
        buttonCityAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCityAvailableActionPerformed(evt);
            }
        });

        buttonLastTime.setText("Last Updated Time");
        buttonLastTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLastTimeActionPerformed(evt);
            }
        });

        textSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textSerialNumberActionPerformed(evt);
            }
        });

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        labelAvailableCars.setText("Available Ubers");

        labelNotAvailableUbers.setText("Not Available Ubers");

        labelLastTime.setText("Last Updated Time");

        textModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textModelNumberActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listCars);

        btnCarManufacturers.setText("List all Car Manufacturers");
        btnCarManufacturers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarManufacturersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonManufacturedYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonCarBrand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textCarBrand)
                            .addComponent(txtManufactureYearSearch)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonFirstAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(buttonSerialNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                    .addComponent(buttonSeatNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(textMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textMaximum, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(textSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(textModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 155, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelAvailableCars)
                            .addComponent(labelNotAvailableUbers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelLastTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnCarManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(buttonListCarBrands, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonLastTime, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                                .addComponent(buttonCityAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(buttonRefresh)
                                .addGap(87, 87, 87))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(textCityAvailability, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                                .addGap(96, 96, 96))))))
            .addComponent(labelAdvancedSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(labelAdvancedSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(202, 202, 202)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonFirstAvailable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonRefresh)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonListCarBrands)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonAvailable)
                    .addComponent(buttonLastTime))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCarBrand)
                    .addComponent(textCarBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonCityAvailable)
                    .addComponent(textCityAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonManufacturedYear)
                            .addComponent(txtManufactureYearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonSeatNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textMinimum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textMaximum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSerialNumber)
                            .addComponent(textSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonModelNumber)
                            .addComponent(textModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCarManufacturers)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelAvailableCars)
                        .addGap(32, 32, 32)
                        .addComponent(labelNotAvailableUbers)
                        .addGap(36, 36, 36)
                        .addComponent(labelLastTime)
                        .addGap(30, 30, 30))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(466, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableUberViewAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tableUberViewAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_tableUberViewAncestorMoved

    private void buttonAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAvailableActionPerformed
        // TODO add your handling code here:
        //initiate the availability value
        int availability = 0;

        //check for the cars that have their availability status as Yes
        for (Uber uber: ubercatalogue.getUber_catalogue()) 
        
        {
            if(uber.getAvailable_status().matches("yes"))
            availability++;
        }
        labelAvailableCars.setText("Available: " + availability);
        labelNotAvailableUbers.setText("Not Available: " + (ubercatalogue.getUber_catalogue().size() - availability));
        
         int available = 0;
        
        //check for the cars that have their availability status as Yes
        for (Uber uber: ubercatalogue.getUber_catalogue()) {
           if(uber.getAvailable_status().matches("yes")) {
               availability++;
           }
        }
        labelAvailableCars.setText("Available: " + availability);
        labelNotAvailableUbers.setText("Not Available: " + (ubercatalogue.getUber_catalogue().size() - availability)); 
    }//GEN-LAST:event_buttonAvailableActionPerformed

    private void buttonFirstAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFirstAvailableActionPerformed
        // TODO add your handling code here:
        populateTable(ubercatalogue.searchFirstAvailable());
    }//GEN-LAST:event_buttonFirstAvailableActionPerformed

    private void buttonCarBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCarBrandActionPerformed
        // TODO add your handling code here:
        if (textCarBrand.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Car Make to search!","Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            populateTable(ubercatalogue.SearchforCarAttribute("carMake", textCarBrand.getText()));
        }

    }//GEN-LAST:event_buttonCarBrandActionPerformed

    private void buttonManufacturedYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonManufacturedYearActionPerformed
        // TODO add your handling code here:
        if (txtManufactureYearSearch.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Manufacturing Year to search!","Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            populateTable(ubercatalogue.SearchforCarAttribute("manufacturingYear", txtManufactureYearSearch.getText()));
        }
    }//GEN-LAST:event_buttonManufacturedYearActionPerformed

    private void buttonSeatNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSeatNumberActionPerformed
        // TODO add your handling code here:
        if (textMinimum.getText().isEmpty() || textMaximum.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Min and Max seats to search!","Warning", JOptionPane.WARNING_MESSAGE);
        } 
        else
        {
            populateTable(ubercatalogue.searchSeatNumber(Integer.valueOf(textMinimum.getText()), Integer.valueOf(textMaximum.getText())));
        }

    }//GEN-LAST:event_buttonSeatNumberActionPerformed

    private void textCarBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textCarBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textCarBrandActionPerformed

    private void txtManufactureYearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtManufactureYearSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtManufactureYearSearchActionPerformed

    private void buttonModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModelNumberActionPerformed
        // TODO add your handling code here:
        if (textModelNumber.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Model Number to search!","Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            populateTable(ubercatalogue.SearchforCarAttribute("model number", textModelNumber.getText()));
        }
    }//GEN-LAST:event_buttonModelNumberActionPerformed

    private void buttonSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSerialNumberActionPerformed
        // TODO add your handling code here:
        if (textSerialNumber.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Serial Number to search!","Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            populateTable(ubercatalogue.SearchforCarAttribute("serial number", textSerialNumber.getText()));
        }
    }//GEN-LAST:event_buttonSerialNumberActionPerformed

    private void buttonListCarBrandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonListCarBrandsActionPerformed
        // TODO add your handling code here:
        listCars.setListData(ubercatalogue.getListofCarManufacturers());
    }//GEN-LAST:event_buttonListCarBrandsActionPerformed

    private void buttonCityAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCityAvailableActionPerformed
        // TODO add your handling code here:
        if (textCityAvailability.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a City to search!","Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            populateTable(ubercatalogue.SearchforCarAttribute("city", textCityAvailability.getText()));
        }
    }//GEN-LAST:event_buttonCityAvailableActionPerformed

    private void buttonLastTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLastTimeActionPerformed
        // TODO add your handling code here:

        labelLastTime.setText(this.ubercatalogue.getLastTime());

    }//GEN-LAST:event_buttonLastTimeActionPerformed

    private void textSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textSerialNumberActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        // TODO add your handling code here:
        populateTable(this.ubercatalogue.getUber_catalogue());
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void textModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textModelNumberActionPerformed

    private void btnCarManufacturersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarManufacturersActionPerformed
        // TODO add your handling code here:
        listCars.setListData(ubercatalogue.getListofCarManufacturers());
    }//GEN-LAST:event_btnCarManufacturersActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCarManufacturers;
    private javax.swing.JButton buttonAvailable;
    private javax.swing.JButton buttonCarBrand;
    private javax.swing.JButton buttonCityAvailable;
    private javax.swing.JButton buttonFirstAvailable;
    private javax.swing.JButton buttonLastTime;
    private javax.swing.JButton buttonListCarBrands;
    private javax.swing.JButton buttonManufacturedYear;
    private javax.swing.JButton buttonModelNumber;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JButton buttonSeatNumber;
    private javax.swing.JButton buttonSerialNumber;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelAdvancedSearch;
    private javax.swing.JLabel labelAvailableCars;
    private javax.swing.JLabel labelLastTime;
    private javax.swing.JLabel labelNotAvailableUbers;
    private javax.swing.JList<String> listCars;
    private javax.swing.JTable tableUberView;
    private javax.swing.JTextField textCarBrand;
    private javax.swing.JTextField textCityAvailability;
    private javax.swing.JTextField textMaximum;
    private javax.swing.JTextField textMinimum;
    private javax.swing.JTextField textModelNumber;
    private javax.swing.JTextField textSerialNumber;
    private javax.swing.JTextField txtManufactureYearSearch;
    // End of variables declaration//GEN-END:variables

private void populateTable(ArrayList<Uber> AdvancedSearchResults) 
{
        DefaultTableModel abc = (DefaultTableModel)tableUberView.getModel();
        abc.setRowCount(0);
        
        
        for(Uber uber : AdvancedSearchResults)
        {
            Object[] data = new Object[9];
            System.out.println(uber.getCar_create());
            data[0] = uber.getCar_create();
            data[1] = uber.getManufacture_year();
            data[2] = uber.getSeat_count();
            data[3] = uber.getSerial_no();
            data[4] = uber.getModel_no();
            data[5] = uber.getPlace();
            data[6] = uber.getMaintenance();
            data[7] = uber.getAvailable_status();
            data[8] = uber.getAvailable_date();
            
            abc.addRow(data);
        }
}
}



